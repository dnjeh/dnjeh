<div class="wrap_app"><div class="info_area"><div class="folder_name"><button type="button" class="btn_folder pink"><span class="text">ADT</span></button></div><div class="time_stamp"><span>최종 수정: 2024. 11. 17.(일) 오후 8:04</span></div></div><h2 class="edit_title" placeholder="제목" contenteditable="true" spellcheck="false"></h2><div class="edit_cover" style="min-height: 657px;"><div class="workseditor-classic " style="position: relative;"><div class="_cover" style="position: absolute; width: 100%; height: 100%; z-index: 100; display: none;"></div><div class="editor_body"><div class="workseditor-editor" style="overflow: auto; height: 100%;"><div class="workseditor-header"></div><div class="workseditor-body"><div placeholder="메모를 입력하세요. #태그를 추가하면 태그별로 메모를 모아볼 수 있어요." class="workseditor-content" contenteditable="true" spellcheck="false" style="outline: none; overflow-wrap: break-word; font-size: 15px; line-height: 1.5; min-height: 657px;"><div><span>PD overview</span></div><div><br></div><div><span>피지컬 디자인이 뭔지, 발전과정 등등</span></div><div><br></div><div><span>더 많은 면적에 더 많은 TR을 배치해 성능을 높임</span></div><div><span>무어의 법칙에 따라 발전해옴</span></div><div><br></div><div><span>집적도 = 반도체 칩의 일정 면적에 얼마나 많은 TR이 배치되어 있는지를 나타내는 용어</span></div><div><span>따라서 집적도가 높아지면 </span></div><div><span>1. 트렌지스터가 많아짐에 따라 성능이 더 높아짐</span></div><div><span>2. 전력 효율성이 개선됨</span></div><div><span>3. 비용절감</span></div><div><span>칩 내부에 트렌지스터가 많아지며 칩 하나하나 시뮬레이션 하는데 걸리는 시간(runtime)이 길어짐</span></div><div><span>그래서 중간중간 확인하기 어려워짐에 따라 요즈음엔 담당자별로 블럭단위로 쪼개 하나씩 만들고 시뮬레이션 돌림</span></div><div><br></div><div><span>무어의 법칙 = 매 년 회로안에 트렌지스터 집적도가 2배씩 늘어 날 것이라는 법칙</span></div><div><span>최근엔 한계가 찾아와 그래프를 따라가기 힘들어져 새로운 공법(GAA)들이 나옴</span></div><div><br></div><div><span>우리가 만든 반도체는 핸드폰, 카메라, 마이크등 여러군데에 다 들어감</span></div><div><br></div><div><span>반도체를 만들 땐 먼저 추상적으로 계획 한 후 디자인 툴을 사용해 디자인을 함 이때 우리가 만들어낸 IP나 다른곳에서 사온 IP등을 기성품처럼 끼워넣어 사용하기도 함</span></div><div><br></div><div><span>칩의 구성 flow</span></div><div><span>System Level 설계</span></div><div><br></div><div><span>RTL Level 설계</span></div><div><br></div><div><span>Gate Level 설계</span></div><div><br></div><div><span>Transistor Level</span></div><div><br></div><div><span>Layout Level &lt;&lt;PD가 주로 하는 일</span></div><div><br></div><div><span>Mask Level</span></div><div><br></div><div><span>이 모든 과정에 검증이 필요함</span></div><div><br></div><div><span>System Level</span></div><div><span>먼저 추상적으로 어떤 칩을 만들지 계획을 세움 &lt; 타이밍과 파워 등을 제외한 칩의 기능만을 나타낸 추상적 알고리즘을 세움</span></div><div><br></div><div><span>RTL Level</span></div><div><span>추상적으로 한 계획을 토대로 RTL언어로 변환해 하드웨어로 동작 할 수 있게금 다시 코딩을 해줌 &lt;&lt; 회로에서 가장 중요한 단계</span></div><div><br></div><div><span>Gate Level Netlist</span></div><div><span>위의 설계들을 논리게이트 레벨로 설계를 함 &lt;여기서 나온 netlist가 PD의 Input 파일</span></div><div><br></div><div><span>Transistor Level to Mask Level</span></div><div><span>PD가 주로 하는 일</span></div><div><span>Transistor Level</span></div><div><span>NMOS, PMOS등을 활용해 칩에 세길 위에서 바라본 게이트의 문양을 그려줌 &lt; 판교에서 하는 일</span></div><div><span>Layout Level</span></div><div><span>대충 이거 다 하면 GDS나옴</span></div><div><span>GDS file = 칩 하나를 위에서 본 모습을 그린 파일, 이걸 합쳐서 팹에 보냄</span></div><div><br></div><div><span>사용하는 툴</span></div><div><span>1960~</span></div><div><span>이땐 반도체 툴이 없어 간단한 논리회로들을 손으로 그리고 수작업으로 배선을 했음</span></div><div><span>Fairchild : 최초로 트렌지스터와 집적회로를 상업화 한 회사중 하나</span></div><div><span>8088A = 오버레이, 반도체 회로도를 시각화 하는것을 도와줌</span></div><div><span>이 당시엔 필름을 활용해 회로도를 그림, 이렇게 그린 것을 테이프처럼 말아 공장에 보냈어서 테이프아웃이란 용어를 사용함</span></div><div><br></div><div><span>현재는 거의 모든 부분이 자동화가 되어있어 편리함</span></div><div><span>설계(Design)</span></div><div><span>RTL레벨로 설계하고 합성하고 레이아웃 설계하고 PCB까지 하는 과정에서의 모든 설계를 이 단계에서 함</span></div><div><br></div><div><span>시뮬레이션(Simulation)</span></div><div><span>설계 완료된 논리게이트, 실제 공정에서 나온 칩, 전자기장 등을 시뮬레이션 해 테스트 하는것</span></div><div><br></div><div><span>분석 및 검증(Analysis and Verification)</span></div><div><span>설계된 칩의 동작, 클락, 기능적 사양, 동일성, 타이밍, 물리적 검증(PD에서 함) 과 같은 다양한 검증을 함</span></div><div><span>물리적 검증에선 설계 완료된 칩이 물리적으로 문제가 없는지를 DRC나 LVS등을 사용해 검증함</span></div><div><br></div><div><span>위의 3개 단계로 나눌 수 있음</span></div><div><span>복잡한 전자회로를 설계하고 시뮬레이션까지 도와주는걸 EDA(전자설계자동화 툴)이라고 함</span></div><div><br></div><div><span>EDA툴 밴더들은 팹리스와 파운드리 사이에서 설계 자동화 툴들을 만들어 공급을 함</span></div><div><span>PD 엔지니어들은 EDA툴, 파운드리에서 제공하는 툴, 팹리스가 주는 RTL레벨등의 다양한 이해도가 필요함</span></div><div><span>이런 툴들을 사용해 여러가지 테스트를 진행하고 결과중 가장 좋은 결과를 GDS로 만들어 파운드리에 전달함</span></div><div><span>여기서 전달하는걸 테이프 아웃이라고 함 </span></div><div><br></div><div><span>Chip design flow</span></div><div><span>정의 및 계획(Definition &amp; Planning)</span></div><div><span>Marketing Requirements Document(MRD, 마케팅 요구사앙 문서) = 시장이 요구하는 칩에대한 정보를 담고있는 문서, 프로젝트 전반의 지침이 됨</span></div><div><span>Chip Architecture(칩 아키텍쳐) = 칩의 구성요소를 정리 해 놓은것</span></div><div><span>Design Documents(설계 문서) = 다양한 구성요소 및 시스템에 대한 세부 사양 및 설계를 포함 하고 있음</span></div><div><span>Floorplan/Board Requirement = 물리적 요구사항을 충족하기 위한 배치를 나타낸 문서</span></div><div><span>Process and fab = 기술적 노드를 기술 해 놓은것</span></div><div><span>Project kick off = 프로젝트를 시작 하는것, Physical 적으로 구현하기 위한 design 시작</span></div><div><br></div><div><span>RTL설계후 검증(Design and Verification)</span></div><div><span>이 과정에서 IP도 검증하는데</span></div><div><span>Hard IP는 특정 기능을 수행하는 전자회로 블록이 물리적 레이아웃으로 제공되는 것 &lt; 이미 다 완성된 IP를 제공하는 것</span></div><div><span>타이밍 모델, 레이아웃, 베릴로그, 스파이스 모델 등을 다 제공해주고 갖다 쓰기만 하면 됨</span></div><div><span>램이나 PLL은 모두 하드 IP임</span></div><div><br></div><div><span>Soft IP는 RTL코드 형식으로 제공되는데 설계자 필요에 따라 수정 할 수 있는 유연성 높은 IP를 Soft IP라고 함</span></div><div><span>재사용이 가능하고 이미 개발된 IP라 설계 시간을 단축할수 있고 이에따라 개발 비용도 줄어들어 좋음</span></div><div><span>최적화가 되어있는 IP들이라 성능을 좀더 좋은걸 쓸 수 있고 신뢰성을 높일 수 있음</span></div><div><span>이런 IP들로 경쟁력을 높일 수 있음</span></div><div><span>=======================================</span></div><div><span>중요한 피지컬 디자인 flow</span></div><div><span>피지컬 디자인은 간단히 "logic DB를 피지컬 DB로 만들기 위한 단계"&lt;&lt;중요하니까 적으세요</span></div><div><span>그래서 netlist(logic DB)를 전달받아 GDS(physical DB)로 만드는 단계</span></div><div><span>GDS파일이란 디자인 데이터를 저장하기 위한 파일, 우리가 디자인한 회로에 대한 정보가 다 포함되어 있음</span></div><div><br></div><div><span>init(Floorplan, I/O Ring, Power Plan)</span></div><div><span>Floorplan 및 Power Plan을 진행하는 단계</span></div><div><br></div><div><span>Placement</span></div><div><span>셀을 배치하는 단계</span></div><div><br></div><div><span>CTS</span></div><div><span>클락을 클락트리를 구성해 분배하는 단계+real clock을 적용하는 단계</span></div><div><br></div><div><span>Route</span></div><div><span>DRC를 고려하여 셀을 메탈로 연결해주는 단계&lt;&lt;이전엔 DRC 고려 안홤</span></div><div><br></div><div><span>Sign-off(DRC, LVS, Antennas, EM)</span></div><div><span>검증단계</span></div><div><span>=======================================</span></div><div><span>반도체 칩은 두 개로 나뉘어져 있는데(대충 네모 두개)</span></div><div><span>바깥쪽 네모를 Die</span></div><div><span>반도체를 웨이퍼에 그렸을 때 잘려 나갈 때 붙어있는 부분</span></div><div><span>안쪽 네모를 Core</span></div><div><span>안쪽에 Core가 진짜 셀들이 놓여있는 부분</span></div><div><br></div><div><span>우리는 Core영역에 Floorplan을 진행함</span></div><div><br></div><div><span>이노버스 DB를 켜면 사이드에 네모난 애들이 올라옴, 우린 이 네모나 애들을 옮겨서 배치를 해줌&lt;&lt;이를 Floorplan이라고 함</span></div><div><span>어떻게 배치하고 어디에 놓아야 좋을지를 생각하면서 Floorplan을 진행 해야함</span></div><div><span>램같이 큰 애들이 쌩뚱맞게 중앙에 있으면 배선이 복잡해지고 비효율적이어서 이를 생각하면서 하는게 중요함</span></div><div><span>이노버스 툴에서 블록의 내부를 표현하지 않고 네모 블록으로 나타내는 이유는 옮길 때 오래걸려서</span></div><div><span>만약 검증이 필요하면 블록 내부까지 다 고려해 성능을 점검 해야함</span></div><div><br></div><div><span>Floorplan이 끝나면 반도체에 파워를 집어넣어주는 Power plan을 함</span></div><div><span>칩에 파워가 들어가야 동작을 하기 때문에 파워를 연결해 주어야 함</span></div><div><span>각각의 블록 위에 파워를 공급 해 주고, 그 위에 메탈들을 깔아줌</span></div><div><span>이때 파워에 IR(방해하는 힘)Drop을 고려해야함&lt;메모리한테 전류를 뺏기거나 저항이 세 파워의 출력이 떨어지는 폭을 제한 해줘야함</span></div><div><br></div><div><span>Placement</span></div><div><span>로직 셀들을 배치해주는 것</span></div><div><span>Nand OR 인버터 등의 다양한 로직 셀들을 배치 해 주는것</span></div><div><br></div><div><span>CTS</span></div><div><span>위의 Placement를 기반으로 ClockTree를 생성함</span></div><div><span>Placement까진 ideal clock(가짜 클락)을 적용해서 진행함</span></div><div><span>이 ideal clock에선 물리적인 저항은 생각하지 않고 값이 다 동시에 도착하는 것 처럼 생각을 함</span></div><div><span>ex)인천~부산까지의 시간=인천~서울 이라고 생각을 해버림</span></div><div><span>그래서 CTS에선 피지컬적인 delay까지 다 고려하는 Real clock을 적용해줌</span></div><div><span>Clock Tree에서 Skew를 맞춰주는걸 Skew blancing이라고 하는데 그걸 CTS에서 해줌</span></div><div><br></div><div><span>ideal<span style="white-space:pre">	</span><span style="white-space:pre">	</span>|real</span></div><div><span>delay 고려 x<span style="white-space:pre">	</span>|실질적 netdelay 고려</span></div><div><span>delay, skew 반영 x<span style="white-space:pre">	</span>|실제 timing을 반영함</span></div><div><span>현실적이지 않음<span style="white-space:pre">	</span>|설계 오류 확인 가능</span></div><div><br></div><div><span>Route</span></div><div><span>라우팅은 2단계로 나눌 수 있음</span></div><div><span>Global Route</span></div><div><span>글로벌 라우트는 신호가 이동해야하는 대략적인 경로를 설정해줌</span></div><div><span>대략적으로 삐뚤빼뚤하게 그려줌&lt;이를 track이라고 함(사람은 인도, 차는 차도라는 대략적 개념만 설명하는것)</span></div><div><span>Detail Route</span></div><div><span>ex)상현역에서 AD까지 오는 경로를 나타내려고 한다</span></div><div><span>이를 대략적으로 차도와 인도를 구분하지 않고 정해주는걸 글로벌 라우트, 걸어오고 싶으면 인도로 어떻게 어떻게 와라를 알려주는걸 디테일 라우트라고 함</span></div><div><br></div><div><span>DRC</span></div><div><span>이 라우트 때 DRC룰을 넣어주는데 DRC룰은 공장마다 다름</span></div><div><span>공장엔 다양한 장비사의 다양한 장비들이 있는데 공장마다 장비가 달라 장비마다 원하는 스팩에 따라 DRC룰이 다 다름. 그래서 라우팅 시에 이를 고려해 주어야 함</span></div><div><span>ex) "메탈의 간격이 n마이크로 떨어져야 오류가 안난다"등의 룰을 담고 있는 것을 PDK rule file라고 하는데 라우팅때 이 파일에 다 맞춰줘야 공장에서 실 제작시에 오류가 안남</span></div><div><br></div><div><span>LVS(Layout Vs 스키메틱)</span></div><div><span>넷리스트는 각 부품의 연결관계를 적어놓은 맵이라고 생각하면 되는데 이 넷리스트에 설계된 정보와 우리가 설계한 정보가 같은지를 확인해야 되는데 이를 LVS라고 함</span></div><div><br></div><div><span>Antennas </span></div><div><span>공정에서 산화막을 제거하는 에칭공정을 거치는데 이때 이온을 넣어줄때 넣어주면 안될곳에 이온이 들어가 고장이 남</span></div><div><span>이를 방지하기 위해 다이오드를 꽂아 플라즈마 흐르는 것을 방지함</span></div><div><br></div><div><span>EM</span></div><div><span>나중에</span></div><div><br></div><div><span>Physical Design - Backend Flow</span></div><div><span>피지컬 디자인을 위한 Input File</span></div><div><span>Front-End</span></div><div><span>Sped</span></div><div><span>Architecture</span></div><div><span>RTL</span></div><div><span>Verification</span></div><div><span>SDC</span></div><div><br></div><div><span>Vendors(스텐다드 셀을 제공해주는 회사)</span></div><div><span>Standard Cells</span></div><div><span>Architecture</span></div><div><span>RTL</span></div><div><span>Verification</span></div><div><br></div><div><span>Foundry</span></div><div><span>Device Models</span></div><div><span>Techfile</span></div><div><span>Design Rules</span></div><div><span>이게 다 PD Input File이다.</span></div><div><br></div><div><span>대충 배치하고 메탈로 연결하고 RC깂 계산해 검증하고 디자인 검증하고 타이밍 검증하고 배치 검증하고 메탈 검증하고 하는 작업을 거쳐 완성됨</span></div><div><span>웨이퍼가 갈릴 때의 차이 등도 체크하고 검증해 웨이퍼 전체의 차이를 방지하는 Density등도 함</span></div><div><br></div><div><span>그래서 최종적 OUTPUT은 GDS파일을 이쁘게 잘 뽑아내는것</span></div><div><br></div><div><span>Sign-off</span></div><div><span>이렇게 GDS를 뽑은 후 테이프아웃 되기전에 통과해야하는 검증단계</span></div><div><span>디자인에 문제가 없는 지 검증하는 단계</span></div><div><span>파운드리에서 준 룰파일에 적합하게 GDS파일이 만들어 졌는지 쇼트같은 문제는 없는지를 검증하는 단계를 Sign-off 라고 함</span></div></div></div></div></div></div></div><input id="attachPhoto" type="file" name="uploadImage" accept="image/*" multiple="" style="display: none;"><ul class="tag_area"></ul></div>
